open Parsetree

let loc = Location.none

type foobar = Foo of int | Bar of bool

let pp_exp = Pprintast.expression
let pp_typ = Pprintast.core_type

let pp_foobar = function
  | Foo d -> Format.printf "Foo : %a" Format.pp_print_int d
  | Bar b -> Format.printf "Foo : %a" Format.pp_print_bool b

let () =
  Format.printf "%a\n" Pprintast.expression [%expr 1 + 1];
  Format.printf "%a\n" Pprintast.core_type [%type: int];
  Format.printf "%a\n" pp_exp [%expr 1 + 1];
  Format.printf "exp : %a, typ : %a\n" pp_exp [%expr 42] pp_typ [%type: string];
  Format.printf "exp : %d, typ : %a\n" 42 pp_typ [%type: int];
  ()

(executable
 (name test)
 (libraries ppxlib)
 (preprocess
  (pps ppxlib.metaquot)))
